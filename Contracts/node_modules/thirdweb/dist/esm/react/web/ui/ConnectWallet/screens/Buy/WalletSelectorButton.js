import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import styled from "@emotion/styled";
import { useState } from "react";
import { shortenAddress } from "../../../../../../utils/address.js";
import { useCustomTheme } from "../../../../../core/design-system/CustomThemeProvider.js";
import { iconSize, radius, spacing, } from "../../../../../core/design-system/index.js";
import { useChainName } from "../../../../../core/hooks/others/useChainQuery.js";
import { useEnsAvatar, useEnsName } from "../../../../../core/utils/wallet.js";
import { Img } from "../../../components/Img.js";
import { TokenIcon } from "../../../components/TokenIcon.js";
import { WalletImage } from "../../../components/WalletImage.js";
import { Container } from "../../../components/basic.js";
import { Button } from "../../../components/buttons.js";
import { Text } from "../../../components/text.js";
import { Blobbie } from "../../Blobbie.js";
import { formatTokenBalance } from "../formatTokenBalance.js";
export function WalletRowWithBalances(props) {
    const theme = useCustomTheme();
    const [showAll, setShowAll] = useState(false);
    const maxDisplayedBalances = 3;
    const displayedBalances = showAll
        ? props.balances
        : props.balances.slice(0, maxDisplayedBalances);
    return (_jsxs(Container, { bg: "tertiaryBg", style: {
            borderRadius: radius.lg,
            border: `1px solid ${theme.colors.borderColor}`,
        }, children: [_jsx(Container, { style: { padding: spacing.sm }, children: _jsx(WalletRow, { ...props }) }), _jsx("div", { style: { borderTop: `1px solid ${theme.colors.borderColor}` } }), _jsx(Container, { flex: "column", children: props.balances.length > 0 ? (_jsxs(_Fragment, { children: [displayedBalances.map((b) => (_jsx(TokenBalanceRow, { client: props.client, onClick: () => props.onClick(props.wallet, b.token, b.chain), tokenBalance: b, wallet: props.wallet }, `${b.token.address}-${b.chain.id}`))), props.balances.length > maxDisplayedBalances && (_jsx(StyledButton, { variant: "secondary", onClick: () => setShowAll(!showAll), style: {
                                justifyContent: "start",
                            }, children: _jsx(Text, { size: "xs", children: showAll ? "Show less" : "Show more" }) }))] })) : (_jsx(Container, { style: { padding: spacing.sm }, children: _jsx(Text, { size: "sm", color: "secondaryText", children: "Not enough funds" }) })) })] }));
}
function TokenBalanceRow(props) {
    const { tokenBalance, wallet, onClick, client } = props;
    const chainInfo = useChainName(tokenBalance.chain);
    return (_jsxs(StyledButton, { onClick: () => onClick(tokenBalance.token, wallet), variant: "secondary", children: [_jsx(TokenIcon, { token: tokenBalance.token, chain: tokenBalance.chain, size: "md", client: client }), _jsxs(Container, { flex: "column", gap: "3xs", children: [_jsx(Text, { size: "xs", color: "primaryText", children: tokenBalance.token.symbol }), chainInfo && _jsx(Text, { size: "xs", children: chainInfo.name })] }), _jsx("div", { style: { flex: 1 } }), _jsx(Container, { flex: "row", center: "y", gap: "3xs", children: _jsx(Text, { size: "xs", color: "secondaryText", children: formatTokenBalance(tokenBalance.balance, true) }) })] }));
}
export function WalletRow(props) {
    const { client, address } = props;
    const walletId = props.walletId;
    const theme = useCustomTheme();
    const ensNameQuery = useEnsName({
        client,
        address,
    });
    const addressOrENS = ensNameQuery.data || shortenAddress(address);
    const ensAvatarQuery = useEnsAvatar({
        client,
        ensName: ensNameQuery.data,
    });
    return (_jsxs(Container, { flex: "row", center: "y", gap: "sm", color: "secondaryText", children: [ensAvatarQuery.data ? (_jsx(Img, { src: ensAvatarQuery.data, width: props.iconSize ? iconSize[props.iconSize] : iconSize.md, height: props.iconSize ? iconSize[props.iconSize] : iconSize.md, style: {
                    borderRadius: "100%",
                    overflow: "hidden",
                    border: `1px solid ${theme.colors.borderColor}`,
                }, client: props.client })) : walletId ? (_jsx(WalletImage, { id: walletId, size: props.iconSize || iconSize.md, client: props.client })) : (_jsx(Container, { style: {
                    width: iconSize.md,
                    height: iconSize.md,
                    borderRadius: "100%",
                    overflow: "hidden",
                    border: `1px solid ${theme.colors.borderColor}`,
                }, children: _jsx(Blobbie, { address: props.address, size: Number(iconSize.md) }) })), _jsx(Text, { size: props.textSize || "sm", color: "primaryText", children: addressOrENS || shortenAddress(props.address) })] }));
}
const StyledButton = /* @__PURE__ */ styled(Button)((_) => {
    const theme = useCustomTheme();
    return {
        background: theme.colors.tertiaryBg,
        justifyContent: "flex-start",
        flexDirection: "row",
        padding: spacing.sm,
        gap: spacing.sm,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
            transform: "scale(1.01)",
        },
        transition: "background 200ms ease, transform 150ms ease",
    };
});
//# sourceMappingURL=WalletSelectorButton.js.map