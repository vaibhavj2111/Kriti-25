"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayWithCryptoQuoteInfo = PayWithCryptoQuoteInfo;
const jsx_runtime_1 = require("react/jsx-runtime");
const formatNumber_js_1 = require("../../../../../../../utils/formatNumber.js");
const CustomThemeProvider_js_1 = require("../../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const useWalletBalance_js_1 = require("../../../../../../core/hooks/others/useWalletBalance.js");
const Skeleton_js_1 = require("../../../../components/Skeleton.js");
const basic_js_1 = require("../../../../components/basic.js");
const text_js_1 = require("../../../../components/text.js");
const TokenSymbol_js_1 = require("../../../../components/token/TokenSymbol.js");
const formatTokenBalance_js_1 = require("../../formatTokenBalance.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const PayTokenIcon_js_1 = require("../PayTokenIcon.js");
const WalletSelectorButton_js_1 = require("../WalletSelectorButton.js");
/**
 * Shows an amount "value" and renders the selected token and chain
 * It also renders the buttons to select the token and chain
 * It also renders the balance of active wallet for the selected token in selected chain
 * @internal
 */
function PayWithCryptoQuoteInfo(props) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const { name } = (0, useChainQuery_js_1.useChainName)(props.chain);
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: props.payerAccount.address,
        chain: props.chain,
        tokenAddress: (0, nativeToken_js_1.isNativeToken)(props.token) ? undefined : props.token.address,
        client: props.client,
    });
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { bg: "tertiaryBg", style: {
            borderRadius: index_js_1.radius.lg,
            border: `1px solid ${theme.colors.borderColor}`,
            ...(props.swapRequired
                ? {
                    borderBottom: "none",
                    borderBottomLeftRadius: 0,
                    borderBottomRightRadius: 0,
                }
                : {}),
        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", style: {
                    justifyContent: "space-between",
                    padding: index_js_1.spacing.sm,
                    borderBottom: `1px solid ${theme.colors.borderColor}`,
                }, children: [(0, jsx_runtime_1.jsx)(WalletSelectorButton_js_1.WalletRow, { client: props.client, address: props.payerAccount.address }), balanceQuery.data ? ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "3xs", center: "y", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", weight: 500, children: (0, formatTokenBalance_js_1.formatTokenBalance)(balanceQuery.data, false) }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, size: "xs", color: "secondaryText" })] })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "70px", height: index_js_1.fontSize.xs }))] }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", style: {
                    paddingInline: index_js_1.spacing.sm,
                    paddingBlock: index_js_1.spacing.sm,
                    minWidth: "50%",
                    justifyContent: "flex-start",
                    minHeight: "64px",
                }, children: [(0, jsx_runtime_1.jsx)(PayTokenIcon_js_1.PayTokenIcon, { token: props.token, chain: props.chain, size: "md", client: props.client }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", children: [props.isLoading ? ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "120px", height: index_js_1.fontSize.md, color: "borderColor" })) : ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xxs", center: "y", color: "primaryText", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: props.value ? "primaryText" : "secondaryText", children: (0, formatNumber_js_1.formatNumber)(Number(props.value), 6) || "" }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, size: "sm" })] })), name ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", children: name })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "90px", height: index_js_1.fontSize.xs }))] })] })] }));
}
//# sourceMappingURL=PayWithCrypto.js.map