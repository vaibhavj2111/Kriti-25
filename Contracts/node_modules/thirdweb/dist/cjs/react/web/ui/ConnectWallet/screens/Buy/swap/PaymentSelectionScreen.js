"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentSelectionScreen = PaymentSelectionScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_query_1 = require("@tanstack/react-query");
const utils_js_1 = require("../../../../../../../chains/utils.js");
const addresses_js_1 = require("../../../../../../../constants/addresses.js");
const getWalletBalance_js_1 = require("../../../../../../../wallets/utils/getWalletBalance.js");
const CustomThemeProvider_js_1 = require("../../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const useActiveAccount_js_1 = require("../../../../../../core/hooks/wallets/useActiveAccount.js");
const useConnectedWallets_js_1 = require("../../../../../../core/hooks/wallets/useConnectedWallets.js");
const LoadingScreen_js_1 = require("../../../../../wallets/shared/LoadingScreen.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const OutlineWalletIcon_js_1 = require("../../../icons/OutlineWalletIcon.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const WalletSelectorButton_js_1 = require("../WalletSelectorButton.js");
function PaymentSelectionScreen(props) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const connectedWallets = (0, useConnectedWallets_js_1.useConnectedWallets)();
    // if all wallets are connected and showAll wallets is disabled, hide the connect button
    const hideConnectButton = !props.showAllWallets &&
        props.wallets?.every((w) => connectedWallets.includes(w));
    const chainInfo = (0, useChainQuery_js_1.useChainMetadata)(props.toChain);
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const walletsAndBalances = (0, react_query_1.useQuery)({
        queryKey: [
            "wallets-and-balances",
            connectedWallets.map((w) => w.getAccount()?.address),
            props.sourceSupportedTokens,
            props.toChain.id,
            props.toToken,
            props.tokenAmount,
            props.mode,
            activeAccount?.address,
        ],
        queryFn: async () => {
            // in parallel, get the balances of all the wallets on each of the sourceSupportedTokens
            const walletBalanceMap = new Map();
            const balancePromises = connectedWallets.flatMap((wallet) => {
                const account = wallet.getAccount();
                if (!account)
                    return [];
                walletBalanceMap.set(wallet, []);
                // inject the destination token too since it can be used as well to pay/transfer
                const toToken = (0, nativeToken_js_1.isNativeToken)(props.toToken)
                    ? {
                        address: addresses_js_1.NATIVE_TOKEN_ADDRESS,
                        name: chainInfo.data?.nativeCurrency.name || "",
                        symbol: chainInfo.data?.nativeCurrency.symbol || "",
                        icon: chainInfo.data?.icon?.url,
                    }
                    : props.toToken;
                const tokens = {
                    ...props.sourceSupportedTokens,
                    [props.toChain.id]: [
                        toToken,
                        ...(props.sourceSupportedTokens?.[props.toChain.id] || []),
                    ],
                };
                return Object.entries(tokens).flatMap(([chainId, tokens]) => {
                    return tokens.map(async (token) => {
                        try {
                            const chain = (0, utils_js_1.getCachedChain)(Number(chainId));
                            const balance = await (0, getWalletBalance_js_1.getWalletBalance)({
                                address: account.address,
                                chain,
                                tokenAddress: (0, nativeToken_js_1.isNativeToken)(token) ? undefined : token.address,
                                client: props.client,
                            });
                            // show the token if:
                            // - its not the destination token and balance is greater than 0
                            // - its the destination token and balance is greater than the token amount AND we the account is not the default account in fund_wallet mode
                            const shouldInclude = token.address === toToken.address &&
                                chain.id === props.toChain.id
                                ? props.mode === "fund_wallet" &&
                                    account.address === activeAccount?.address
                                    ? false
                                    : Number(balance.displayValue) > Number(props.tokenAmount)
                                : balance.value > 0n;
                            if (shouldInclude) {
                                const existingBalances = walletBalanceMap.get(wallet) || [];
                                existingBalances.push({ balance, chain, token });
                                existingBalances.sort((a, b) => {
                                    if (a.chain.id === props.toChain.id &&
                                        a.token.address === toToken.address)
                                        return -1;
                                    if (b.chain.id === props.toChain.id &&
                                        b.token.address === toToken.address)
                                        return 1;
                                    if (a.chain.id === props.toChain.id)
                                        return -1;
                                    if (b.chain.id === props.toChain.id)
                                        return 1;
                                    return a.chain.id > b.chain.id ? 1 : -1;
                                });
                            }
                        }
                        catch (error) {
                            console.error(`Failed to fetch balance for wallet ${wallet.id} on chain ${chainId} for token ${token.symbol}:`, error);
                        }
                    });
                });
            });
            await Promise.all(balancePromises);
            return walletBalanceMap;
        },
        enabled: !!props.sourceSupportedTokens && !!chainInfo.data,
    });
    if (walletsAndBalances.isLoading || !walletsAndBalances.data) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xs", children: [Array.from(walletsAndBalances.data?.entries() || [])
                        .filter(([w]) => !props.hiddenWallets?.includes(w.id))
                        .map(([w, balances]) => {
                        const address = w.getAccount()?.address;
                        if (!address)
                            return null;
                        return ((0, jsx_runtime_1.jsx)(WalletSelectorButton_js_1.WalletRowWithBalances, { wallet: w, balances: balances, client: props.client, address: address, onClick: props.onSelect }, w.id));
                    }), !hideConnectButton && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "secondary", fullWidth: true, onClick: props.onConnect, gap: "xs", bg: "tertiaryBg", style: {
                            borderRadius: index_js_1.radius.lg,
                            border: `1px solid ${theme.colors.borderColor}`,
                            padding: index_js_1.spacing.sm,
                        }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", center: "y", expand: true, color: "secondaryIconColor", children: [(0, jsx_runtime_1.jsx)(OutlineWalletIcon_js_1.OutlineWalletIcon, { size: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: "Pay with another wallet" })] }) })), props.payWithFiatEnabled && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "secondary", fullWidth: true, gap: "xs", bg: "tertiaryBg", onClick: props.onSelectFiat, style: {
                            borderRadius: index_js_1.radius.lg,
                            border: `1px solid ${theme.colors.borderColor}`,
                            padding: index_js_1.spacing.sm,
                        }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", center: "y", expand: true, color: "secondaryIconColor", children: [(0, jsx_runtime_1.jsx)(react_icons_1.IdCardIcon, { style: {
                                        width: index_js_1.iconSize.md,
                                        height: index_js_1.iconSize.md,
                                    } }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: "Pay with credit card" })] }) }))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" })] }));
}
//# sourceMappingURL=PaymentSelectionScreen.js.map