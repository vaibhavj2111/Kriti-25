"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletRowWithBalances = WalletRowWithBalances;
exports.WalletRow = WalletRow;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_1 = require("react");
const address_js_1 = require("../../../../../../utils/address.js");
const CustomThemeProvider_js_1 = require("../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../core/hooks/others/useChainQuery.js");
const wallet_js_1 = require("../../../../../core/utils/wallet.js");
const Img_js_1 = require("../../../components/Img.js");
const TokenIcon_js_1 = require("../../../components/TokenIcon.js");
const WalletImage_js_1 = require("../../../components/WalletImage.js");
const basic_js_1 = require("../../../components/basic.js");
const buttons_js_1 = require("../../../components/buttons.js");
const text_js_1 = require("../../../components/text.js");
const Blobbie_js_1 = require("../../Blobbie.js");
const formatTokenBalance_js_1 = require("../formatTokenBalance.js");
function WalletRowWithBalances(props) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const [showAll, setShowAll] = (0, react_1.useState)(false);
    const maxDisplayedBalances = 3;
    const displayedBalances = showAll
        ? props.balances
        : props.balances.slice(0, maxDisplayedBalances);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { bg: "tertiaryBg", style: {
            borderRadius: index_js_1.radius.lg,
            border: `1px solid ${theme.colors.borderColor}`,
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: { padding: index_js_1.spacing.sm }, children: (0, jsx_runtime_1.jsx)(WalletRow, { ...props }) }), (0, jsx_runtime_1.jsx)("div", { style: { borderTop: `1px solid ${theme.colors.borderColor}` } }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", children: props.balances.length > 0 ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [displayedBalances.map((b) => ((0, jsx_runtime_1.jsx)(TokenBalanceRow, { client: props.client, onClick: () => props.onClick(props.wallet, b.token, b.chain), tokenBalance: b, wallet: props.wallet }, `${b.token.address}-${b.chain.id}`))), props.balances.length > maxDisplayedBalances && ((0, jsx_runtime_1.jsx)(StyledButton, { variant: "secondary", onClick: () => setShowAll(!showAll), style: {
                                justifyContent: "start",
                            }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", children: showAll ? "Show less" : "Show more" }) }))] })) : ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: { padding: index_js_1.spacing.sm }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "secondaryText", children: "Not enough funds" }) })) })] }));
}
function TokenBalanceRow(props) {
    const { tokenBalance, wallet, onClick, client } = props;
    const chainInfo = (0, useChainQuery_js_1.useChainName)(tokenBalance.chain);
    return ((0, jsx_runtime_1.jsxs)(StyledButton, { onClick: () => onClick(tokenBalance.token, wallet), variant: "secondary", children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { token: tokenBalance.token, chain: tokenBalance.chain, size: "md", client: client }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "primaryText", children: tokenBalance.token.symbol }), chainInfo && (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", children: chainInfo.name })] }), (0, jsx_runtime_1.jsx)("div", { style: { flex: 1 } }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "y", gap: "3xs", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", children: (0, formatTokenBalance_js_1.formatTokenBalance)(tokenBalance.balance, true) }) })] }));
}
function WalletRow(props) {
    const { client, address } = props;
    const walletId = props.walletId;
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const ensNameQuery = (0, wallet_js_1.useEnsName)({
        client,
        address,
    });
    const addressOrENS = ensNameQuery.data || (0, address_js_1.shortenAddress)(address);
    const ensAvatarQuery = (0, wallet_js_1.useEnsAvatar)({
        client,
        ensName: ensNameQuery.data,
    });
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "sm", color: "secondaryText", children: [ensAvatarQuery.data ? ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: ensAvatarQuery.data, width: props.iconSize ? index_js_1.iconSize[props.iconSize] : index_js_1.iconSize.md, height: props.iconSize ? index_js_1.iconSize[props.iconSize] : index_js_1.iconSize.md, style: {
                    borderRadius: "100%",
                    overflow: "hidden",
                    border: `1px solid ${theme.colors.borderColor}`,
                }, client: props.client })) : walletId ? ((0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { id: walletId, size: props.iconSize || index_js_1.iconSize.md, client: props.client })) : ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                    width: index_js_1.iconSize.md,
                    height: index_js_1.iconSize.md,
                    borderRadius: "100%",
                    overflow: "hidden",
                    border: `1px solid ${theme.colors.borderColor}`,
                }, children: (0, jsx_runtime_1.jsx)(Blobbie_js_1.Blobbie, { address: props.address, size: Number(index_js_1.iconSize.md) }) })), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: props.textSize || "sm", color: "primaryText", children: addressOrENS || (0, address_js_1.shortenAddress)(props.address) })] }));
}
const StyledButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)((_) => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        background: theme.colors.tertiaryBg,
        justifyContent: "flex-start",
        flexDirection: "row",
        padding: index_js_1.spacing.sm,
        gap: index_js_1.spacing.sm,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
            transform: "scale(1.01)",
        },
        transition: "background 200ms ease, transform 150ms ease",
    };
});
//# sourceMappingURL=WalletSelectorButton.js.map