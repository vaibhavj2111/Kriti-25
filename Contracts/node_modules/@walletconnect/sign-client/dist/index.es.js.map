{"version":3,"file":"index.es.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n    };\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n    this.events.once<\"session_connect\">(\n      engineEvent(\"session_connect\"),\n      async ({ error, session }) => {\n        if (error) reject(error);\n        else if (session) {\n          session.self.publicKey = publicKey;\n          const completeSession = {\n            ...session,\n            pairingTopic: proposal.pairingTopic,\n            requiredNamespaces: proposal.requiredNamespaces,\n            optionalNamespaces: proposal.optionalNamespaces,\n            transportType: TRANSPORT_TYPES.relay,\n          };\n          await this.client.session.set(session.topic, completeSession);\n          await this.setExpiry(session.topic, session.expiry);\n          if (topic) {\n            await this.client.core.pairing.updateMetadata({\n              topic,\n              metadata: session.peer.metadata,\n            });\n          }\n          this.cleanupDuplicatePairings(completeSession);\n          resolve(completeSession);\n        }\n      },\n    );\n    const id = await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n    });\n    await this.setProposal(id, { id, ...proposal });\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: \"wc_sessionRequest\",\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: \"wc_sessionRequest\",\n          params: {\n            request: {\n              ...request,\n              expiryTimestamp: calcExpiry(expiry),\n            },\n            chainId,\n          },\n          expiry,\n          throwOnFailedPublish: true,\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        session.self.publicKey = publicKey;\n        await this.client.session.set(session.topic, session);\n        await this.setExpiry(session.topic, session.expiry);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: session.peer.metadata,\n          });\n        }\n        const sessionObject = this.client.session.get(session.topic);\n        await this.deleteProposal(fallbackId);\n        resolve({\n          session: sessionObject,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(id, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(fallbackId);\n      // cleanup listener for fallback response\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // set the ids for both requests\n    const id = payloadId();\n    const fallbackId = payloadId();\n    // subscribe to response events\n    this.events.once<\"session_connect\">(engineEvent(\"session_connect\"), onSessionConnect);\n    this.events.once(engineEvent(\"session_request\", id), onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, id);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: id,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: fallbackId,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(fallbackId, { id: fallbackId, ...proposal });\n    await this.setAuthRequest(id, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[record.request.method].res;\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = rpcOpts || ENGINE_RPC_OPTS[record.request.method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n      if (!this.initialized || this.relayMessageCache.length > 0) {\n        this.relayMessageCache.push(event);\n      } else {\n        this.onRelayMessage(event);\n      }\n    });\n  }\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    const payload = await this.client.core.crypto.decode(topic, message, {\n      receiverPublicKey: publicKey,\n      encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n    });\n    try {\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        sessionTopic,\n      });\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const { relay, controller, expiry, namespaces, sessionProperties, sessionConfig } =\n        payload.params;\n      const session = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: \"\", // pairingTopic will be set in the `session_connect` handler\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        controller: controller.publicKey,\n        self: {\n          publicKey: \"\",\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 997`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { session });\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      setTimeout(() => {\n        this.engine.processRelayMessageCache();\n      }, toMiliseconds(ONE_SECOND));\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","TRANSPORT_TYPES","id","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","appLink","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","onSessionConnect","onAuthenticate","sessionObject","fallbackId","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}