{"version":3,"file":"index.es.js","sources":["../src/constants/values.ts","../src/constants/rpc.ts","../src/EthereumProvider.ts","../src/index.ts"],"sourcesContent":["export const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"ethereum_provider\";\nexport const STORAGE_KEY = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\nexport const RPC_URL = \"https://rpc.walletconnect.org/v1/\";\n","export const REQUIRED_METHODS = [\"eth_sendTransaction\", \"personal_sign\"];\nexport const OPTIONAL_METHODS = [\n  \"eth_accounts\",\n  \"eth_requestAccounts\",\n  \"eth_sendRawTransaction\",\n  \"eth_sign\",\n  \"eth_signTransaction\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"eth_sendTransaction\",\n  \"personal_sign\",\n  \"wallet_switchEthereumChain\",\n  \"wallet_addEthereumChain\",\n  \"wallet_getPermissions\",\n  \"wallet_requestPermissions\",\n  \"wallet_registerOnboarding\",\n  \"wallet_watchAsset\",\n  \"wallet_scanQRCode\",\n  \"wallet_sendCalls\",\n  \"wallet_getCapabilities\",\n  \"wallet_getCallsStatus\",\n  \"wallet_showCallsStatus\",\n];\nexport const REQUIRED_EVENTS = [\"chainChanged\", \"accountsChanged\"];\nexport const OPTIONAL_EVENTS = [\n  \"chainChanged\",\n  \"accountsChanged\",\n  \"message\",\n  \"disconnect\",\n  \"connect\",\n];\n","import { EventEmitter } from \"events\";\nimport { getAccountsFromNamespaces, getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { KeyValueStorageOptions } from \"@walletconnect/keyvaluestorage\";\nimport {\n  IEthereumProvider as IProvider,\n  IEthereumProviderEvents,\n  ProviderAccounts,\n  RequestArguments,\n  QrModalOptions,\n} from \"./types\";\nimport {\n  Metadata,\n  Namespace,\n  UniversalProvider,\n  UniversalProviderOpts,\n} from \"@walletconnect/universal-provider\";\nimport { AuthTypes, SessionTypes, SignClientTypes } from \"@walletconnect/types\";\nimport { JsonRpcResult } from \"@walletconnect/jsonrpc-types\";\nimport {\n  STORAGE_KEY,\n  REQUIRED_METHODS,\n  REQUIRED_EVENTS,\n  RPC_URL,\n  OPTIONAL_METHODS,\n  OPTIONAL_EVENTS,\n} from \"./constants\";\n\nexport type RpcMethod =\n  | \"personal_sign\"\n  | \"eth_sendTransaction\"\n  | \"eth_accounts\"\n  | \"eth_requestAccounts\"\n  | \"eth_call\"\n  | \"eth_getBalance\"\n  | \"eth_sendRawTransaction\"\n  | \"eth_sign\"\n  | \"eth_signTransaction\"\n  | \"eth_signTypedData\"\n  | \"eth_signTypedData_v3\"\n  | \"eth_signTypedData_v4\"\n  | \"wallet_switchEthereumChain\"\n  | \"wallet_addEthereumChain\"\n  | \"wallet_getPermissions\"\n  | \"wallet_requestPermissions\"\n  | \"wallet_registerOnboarding\"\n  | \"wallet_watchAsset\"\n  | \"wallet_scanQRCode\"\n  | \"wallet_sendCalls\"\n  | \"wallet_getCapabilities\"\n  | \"wallet_getCallsStatus\"\n  | \"wallet_showCallsStatus\";\n\nexport type RpcEvent = \"accountsChanged\" | \"chainChanged\" | \"message\" | \"disconnect\" | \"connect\";\n\nexport interface EthereumRpcMap {\n  [chainId: string]: string;\n}\n\nexport interface SessionEvent {\n  event: { name: string; data: any };\n  chainId: string;\n}\n\nexport interface EthereumRpcConfig {\n  chains: string[];\n  optionalChains: string[];\n  methods: string[];\n  optionalMethods?: string[];\n  /**\n   * @description Events that the wallet MUST support or the connection will be rejected\n   */\n  events: string[];\n  optionalEvents?: string[];\n  rpcMap: EthereumRpcMap;\n  projectId: string;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n}\nexport interface ConnectOps {\n  chains?: number[];\n  optionalChains?: number[];\n  rpcMap?: EthereumRpcMap;\n  pairingTopic?: string;\n}\n\nexport type AuthenticateParams = {\n  chains?: number[];\n} & Omit<AuthTypes.SessionAuthenticateParams, \"chains\">;\n\nexport interface IEthereumProvider extends IProvider {\n  connect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getRpcUrl(chainId: string, rpc: EthereumRpcConfig): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getEthereumChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getEthereumChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n\nexport function toHexChainId(chainId: number): string {\n  return `0x${chainId.toString(16)}`;\n}\n\nexport type NamespacesParams = {\n  chains: EthereumRpcConfig[\"chains\"];\n  optionalChains: EthereumRpcConfig[\"optionalChains\"];\n  methods?: EthereumRpcConfig[\"methods\"];\n  optionalMethods?: EthereumRpcConfig[\"methods\"];\n  events?: EthereumRpcConfig[\"events\"];\n  rpcMap: EthereumRpcConfig[\"rpcMap\"];\n  optionalEvents?: EthereumRpcConfig[\"events\"];\n};\n\nexport function buildNamespaces(params: NamespacesParams): {\n  required?: Namespace;\n  optional?: Namespace;\n} {\n  const { chains, optionalChains, methods, optionalMethods, events, optionalEvents, rpcMap } =\n    params;\n  if (!isValidArray(chains)) {\n    throw new Error(\"Invalid chains\");\n  }\n\n  const required: Namespace = {\n    chains,\n    methods: methods || REQUIRED_METHODS,\n    events: events || REQUIRED_EVENTS,\n    rpcMap: {\n      ...(chains.length\n        ? { [getEthereumChainId(chains)]: rpcMap[getEthereumChainId(chains)] }\n        : {}),\n    },\n  };\n\n  // make a list of events and methods that require additional permissions\n  // so we know if we should to include the required chains in the optional namespace\n  const eventsRequiringPermissions = events?.filter((event) => !REQUIRED_EVENTS.includes(event));\n  const methodsRequiringPermissions = methods?.filter((event) => !REQUIRED_METHODS.includes(event));\n\n  if (\n    !optionalChains &&\n    !optionalEvents &&\n    !optionalMethods &&\n    !eventsRequiringPermissions?.length &&\n    !methodsRequiringPermissions?.length\n  ) {\n    return { required: chains.length ? required : undefined };\n  }\n\n  /*\n   * decides whether or not to include the required chains in the optional namespace\n   * use case: if there is a single chain as required but additional methods/events as optional\n   */\n  const shouldIncludeRequiredChains =\n    (eventsRequiringPermissions?.length && methodsRequiringPermissions?.length) || !optionalChains;\n\n  const optional: Namespace = {\n    chains: [\n      ...new Set(\n        shouldIncludeRequiredChains ? required.chains.concat(optionalChains || []) : optionalChains,\n      ),\n    ],\n    methods: [\n      ...new Set(\n        required.methods.concat(optionalMethods?.length ? optionalMethods : OPTIONAL_METHODS),\n      ),\n    ],\n    events: [\n      ...new Set(required.events.concat(optionalEvents?.length ? optionalEvents : OPTIONAL_EVENTS)),\n    ],\n    rpcMap,\n  };\n\n  return {\n    required: chains.length ? required : undefined,\n    optional: optionalChains.length ? optional : undefined,\n  };\n}\n\n// helper type to force setting at least one value in an array\ntype ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\n/**\n * @param {number[]} chains - The Chains your app intents to use and the peer MUST support. If the peer does not support these chains, the connection will be rejected.\n * @param {number[]} optionalChains - The Chains your app MAY attempt to use and the peer MAY support. If the peer does not support these chains, the connection will still be established.\n * @description either chains or optionalChains must be provided\n */\nexport type ChainsProps =\n  | {\n      chains: ArrayOneOrMore<number>;\n      optionalChains?: number[];\n    }\n  | {\n      chains?: number[];\n      optionalChains: ArrayOneOrMore<number>;\n    };\n\nexport type EthereumProviderOptions = {\n  projectId: string;\n  /**\n   * @note Methods that your app intents to use and the peer MUST support. If the peer does not support these methods, the connection will be rejected.\n   * @default [\"eth_sendTransaction\", \"personal_sign\"]\n   */\n  methods?: string[];\n  /**\n   * @note Methods that your app MAY attempt to use and the peer MAY support. If the peer does not support these methods, the connection will still be established.\n   */\n  optionalMethods?: string[];\n  events?: string[];\n  optionalEvents?: string[];\n  rpcMap?: EthereumRpcMap;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n  disableProviderPing?: boolean;\n  relayUrl?: string;\n  storageOptions?: KeyValueStorageOptions;\n} & ChainsProps &\n  UniversalProviderOpts;\n\nexport class EthereumProvider implements IEthereumProvider {\n  public events = new EventEmitter();\n  public namespace = \"eip155\";\n  public accounts: string[] = [];\n  public signer: InstanceType<typeof UniversalProvider>;\n  public chainId = 1;\n  public modal?: any;\n\n  protected rpc: EthereumRpcConfig;\n  protected readonly STORAGE_KEY = STORAGE_KEY;\n\n  constructor() {\n    // assigned during initialize\n    this.signer = {} as InstanceType<typeof UniversalProvider>;\n    this.rpc = {} as EthereumRpcConfig;\n  }\n\n  static async init(opts: EthereumProviderOptions): Promise<EthereumProvider> {\n    const provider = new EthereumProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n\n  public async request<T = unknown>(args: RequestArguments, expiry?: number): Promise<T> {\n    return await this.signer.request(args, this.formatChainId(this.chainId), expiry);\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: JsonRpcResult) => void,\n    expiry?: number,\n  ): void {\n    this.signer.sendAsync(args, callback, this.formatChainId(this.chainId), expiry);\n  }\n\n  get connected(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connected;\n  }\n\n  get connecting(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connecting;\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.session) await this.connect();\n    const accounts = await this.request({ method: \"eth_requestAccounts\" });\n    return accounts as ProviderAccounts;\n  }\n\n  public async connect(opts?: ConnectOps): Promise<void> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts(opts);\n    const { required, optional } = buildNamespaces(this.rpc);\n    try {\n      const session = await new Promise<SessionTypes.Struct | undefined>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.subscribeModal((state: { open: boolean }) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .connect({\n              namespaces: {\n                ...(required && {\n                  [this.namespace]: required,\n                }),\n              },\n              ...(optional && {\n                optionalNamespaces: {\n                  [this.namespace]: optional,\n                },\n              }),\n              pairingTopic: opts?.pairingTopic,\n            })\n            .then((session?: SessionTypes.Struct) => {\n              resolve(session);\n            })\n            .catch((error: Error) => {\n              reject(new Error(error.message));\n            });\n        },\n      );\n      if (!session) return;\n\n      const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n      // if no required chains are set, use the approved accounts to fetch chainIds\n      this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\n      this.setAccounts(accounts);\n      this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      if (this.modal) this.modal.closeModal();\n    }\n  }\n\n  public async authenticate(\n    params: AuthenticateParams,\n    walletUniversalLink?: string,\n  ): Promise<AuthTypes.AuthenticateResponseResult | undefined> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts({\n      chains: params?.chains,\n    });\n\n    try {\n      const result = await new Promise<AuthTypes.AuthenticateResponseResult>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.subscribeModal((state: { open: boolean }) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .authenticate(\n              {\n                ...params,\n                chains: this.rpc.chains,\n              },\n              walletUniversalLink,\n            )\n            .then((result: AuthTypes.AuthenticateResponseResult) => {\n              resolve(result);\n            })\n            .catch((error: Error) => {\n              reject(new Error(error.message));\n            });\n        },\n      );\n\n      const session = result.session;\n      if (session) {\n        const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n        // if no required chains are set, use the approved accounts to fetch chainIds as both contain <namespace>:<chainId>\n        this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\n        this.setAccounts(accounts);\n        this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n      }\n      return result;\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      if (this.modal) this.modal.closeModal();\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    if (this.session) {\n      await this.signer.disconnect();\n    }\n    this.reset();\n  }\n\n  public on: IEthereumProviderEvents[\"on\"] = (event, listener) => {\n    this.events.on(event, listener);\n    return this;\n  };\n\n  public once: IEthereumProviderEvents[\"once\"] = (event, listener) => {\n    this.events.once(event, listener);\n    return this;\n  };\n\n  public removeListener: IEthereumProviderEvents[\"removeListener\"] = (event, listener) => {\n    this.events.removeListener(event, listener);\n    return this;\n  };\n\n  public off: IEthereumProviderEvents[\"off\"] = (event, listener) => {\n    this.events.off(event, listener);\n    return this;\n  };\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  get session() {\n    return this.signer.session;\n  }\n\n  // ---------- Protected --------------------------------------------- //\n\n  protected registerEventListeners() {\n    this.signer.on(\"session_event\", (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      const { params } = payload;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.accounts = this.parseAccounts(event.data);\n        this.events.emit(\"accountsChanged\", this.accounts);\n      } else if (event.name === \"chainChanged\") {\n        this.setChainId(this.formatChainId(event.data));\n      } else {\n        this.events.emit(event.name as any, event.data);\n      }\n      this.events.emit(\"session_event\", payload);\n    });\n\n    this.signer.on(\"chainChanged\", (chainId: string) => {\n      const chain = parseInt(chainId);\n      this.chainId = chain;\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    });\n\n    this.signer.on(\n      \"session_update\",\n      (payload: SignClientTypes.EventArguments[\"session_update\"]) => {\n        this.events.emit(\"session_update\", payload);\n      },\n    );\n\n    this.signer.on(\n      \"session_delete\",\n      (payload: SignClientTypes.EventArguments[\"session_delete\"]) => {\n        this.reset();\n        this.events.emit(\"session_delete\", payload);\n        this.events.emit(\"disconnect\", {\n          ...getSdkError(\"USER_DISCONNECTED\"),\n          data: payload.topic,\n          name: \"USER_DISCONNECTED\",\n        });\n      },\n    );\n\n    this.signer.on(\"display_uri\", (uri: string) => {\n      if (this.rpc.showQrModal) {\n        // to refresh the QR we have to close the modal and open it again\n        // until proper API is provided by walletconnect modal\n        this.modal?.closeModal();\n        this.modal?.openModal({ uri });\n      }\n      this.events.emit(\"display_uri\", uri);\n    });\n  }\n\n  protected switchEthereumChain(chainId: number): void {\n    this.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainId.toString(16) }],\n    });\n  }\n\n  protected isCompatibleChainId(chainId: string): boolean {\n    return typeof chainId === \"string\" ? chainId.startsWith(`${this.namespace}:`) : false;\n  }\n\n  protected formatChainId(chainId: number): string {\n    return `${this.namespace}:${chainId}`;\n  }\n\n  protected parseChainId(chainId: string): number {\n    return Number(chainId.split(\":\")[1]);\n  }\n\n  protected setChainIds(chains: string[]) {\n    const compatible = chains.filter((x) => this.isCompatibleChainId(x));\n    const chainIds = compatible.map((c) => this.parseChainId(c));\n    if (chainIds.length) {\n      this.chainId = chainIds[0];\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    }\n  }\n\n  protected setChainId(chain: string) {\n    if (this.isCompatibleChainId(chain)) {\n      const chainId = this.parseChainId(chain);\n      this.chainId = chainId;\n      this.switchEthereumChain(chainId);\n    }\n  }\n\n  protected parseAccountId(account: string): { chainId: string; address: string } {\n    const [namespace, reference, address] = account.split(\":\");\n    const chainId = `${namespace}:${reference}`;\n    return { chainId, address };\n  }\n\n  protected setAccounts(accounts: string[]) {\n    this.accounts = accounts\n      .filter((x) => this.parseChainId(this.parseAccountId(x).chainId) === this.chainId)\n      .map((x) => this.parseAccountId(x).address);\n    this.events.emit(\"accountsChanged\", this.accounts);\n  }\n\n  protected getRpcConfig(opts: EthereumProviderOptions): EthereumRpcConfig {\n    const requiredChains = opts?.chains ?? [];\n    const optionalChains = opts?.optionalChains ?? [];\n    const allChains = requiredChains.concat(optionalChains);\n    if (!allChains.length)\n      throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n    const requiredMethods = requiredChains.length ? opts?.methods || REQUIRED_METHODS : [];\n    const requiredEvents = requiredChains.length ? opts?.events || REQUIRED_EVENTS : [];\n    const optionalMethods = opts?.optionalMethods || [];\n    const optionalEvents = opts?.optionalEvents || [];\n    const rpcMap = opts?.rpcMap || this.buildRpcMap(allChains, opts.projectId);\n    const qrModalOptions = opts?.qrModalOptions || undefined;\n    return {\n      chains: requiredChains?.map((chain) => this.formatChainId(chain)),\n      optionalChains: optionalChains.map((chain) => this.formatChainId(chain)),\n      methods: requiredMethods,\n      events: requiredEvents,\n      optionalMethods,\n      optionalEvents,\n      rpcMap,\n      showQrModal: Boolean(opts?.showQrModal),\n      qrModalOptions,\n      projectId: opts.projectId,\n      metadata: opts.metadata,\n    };\n  }\n\n  protected buildRpcMap(chains: number[], projectId: string): EthereumRpcMap {\n    const map: EthereumRpcMap = {};\n    chains.forEach((chain) => {\n      map[chain] = this.getRpcUrl(chain, projectId);\n    });\n    return map;\n  }\n\n  protected async initialize(opts: EthereumProviderOptions) {\n    this.rpc = this.getRpcConfig(opts);\n\n    this.chainId = this.rpc.chains.length\n      ? getEthereumChainId(this.rpc.chains)\n      : getEthereumChainId(this.rpc.optionalChains);\n    this.signer = await UniversalProvider.init({\n      projectId: this.rpc.projectId,\n      metadata: this.rpc.metadata,\n      disableProviderPing: opts.disableProviderPing,\n      relayUrl: opts.relayUrl,\n      storageOptions: opts.storageOptions,\n      customStoragePrefix: opts.customStoragePrefix,\n      telemetryEnabled: opts.telemetryEnabled,\n      logger: opts.logger,\n    });\n    this.registerEventListeners();\n    await this.loadPersistedSession();\n    if (this.rpc.showQrModal) {\n      let WalletConnectModalClass;\n      try {\n        const { WalletConnectModal } = await import(\"@walletconnect/modal\");\n        WalletConnectModalClass = WalletConnectModal;\n      } catch {\n        throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n      }\n      if (WalletConnectModalClass) {\n        try {\n          this.modal = new WalletConnectModalClass({\n            projectId: this.rpc.projectId,\n            ...this.rpc.qrModalOptions,\n          });\n        } catch (e) {\n          this.signer.logger.error(e);\n          throw new Error(\"Could not generate WalletConnectModal Instance\");\n        }\n      }\n    }\n  }\n\n  protected loadConnectOpts(opts?: ConnectOps) {\n    if (!opts) return;\n    const { chains, optionalChains, rpcMap } = opts;\n    if (chains && isValidArray(chains)) {\n      this.rpc.chains = chains.map((chain) => this.formatChainId(chain));\n      chains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n    if (optionalChains && isValidArray(optionalChains)) {\n      this.rpc.optionalChains = [];\n      this.rpc.optionalChains = optionalChains?.map((chain) => this.formatChainId(chain));\n      optionalChains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n  }\n\n  protected getRpcUrl(chainId: number, projectId?: string): string {\n    const providedRpc = this.rpc.rpcMap?.[chainId];\n    return (\n      providedRpc ||\n      `${RPC_URL}?chainId=eip155:${chainId}&projectId=${projectId || this.rpc.projectId}`\n    );\n  }\n\n  protected async loadPersistedSession() {\n    if (!this.session) return;\n    try {\n      const chainId = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`);\n\n      // cater to both inline & nested namespace formats\n      const namespace = this.session.namespaces[`${this.namespace}:${chainId}`]\n        ? this.session.namespaces[`${this.namespace}:${chainId}`]\n        : this.session.namespaces[this.namespace];\n\n      this.setChainIds(chainId ? [this.formatChainId(chainId)] : namespace?.accounts);\n      this.setAccounts(namespace?.accounts);\n    } catch (error) {\n      this.signer.logger.error(\"Failed to load persisted session, clearing state...\");\n      this.signer.logger.error(error);\n      await this.disconnect().catch((error) => this.signer.logger.warn(error));\n    }\n  }\n\n  protected reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n\n  protected persist() {\n    if (!this.session) return;\n    this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n  }\n\n  protected parseAccounts(payload: string | string[]): string[] {\n    if (typeof payload === \"string\" || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map((account: string) => this.parseAccount(account));\n  }\n\n  protected parseAccount = (payload: any): string => {\n    return this.isCompatibleChainId(payload) ? this.parseAccountId(payload).address : payload;\n  };\n}\n\nexport default EthereumProvider;\n","import { EthereumProvider as Provider } from \"./EthereumProvider\";\nexport const EthereumProvider = Provider;\nexport type { EthereumProviderOptions, RpcEvent, RpcMethod } from \"./EthereumProvider\";\nexport * from \"./constants/rpc\";\nexport default Provider;\n"],"names":["chains","chainId","params","optionalChains","methods","optionalMethods","events","optionalEvents","rpcMap","isValidArray","required","REQUIRED_METHODS","REQUIRED_EVENTS","__spreadValues","eventsRequiringPermissions","event","methodsRequiringPermissions","shouldIncludeRequiredChains","optional","OPTIONAL_METHODS","OPTIONAL_EVENTS","EthereumProvider","EventEmitter","STORAGE_KEY","listener","payload","opts","provider","args","expiry","callback","session","resolve","reject","_a","state","__spreadProps","error","accounts","getAccountsFromNamespaces","walletUniversalLink","result","chain","getSdkError","uri","_b","chainIds","x","c","account","namespace","reference","address","requiredChains","allChains","requiredMethods","requiredEvents","qrModalOptions","projectId","map","UniversalProvider","WalletConnectModalClass","WalletConnectModal","e","RPC_URL","Provider"],"mappings":"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"}